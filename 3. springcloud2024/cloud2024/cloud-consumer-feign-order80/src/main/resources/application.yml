server:
    port: 80

spring:
    application:
        name: cloud-consumer-openfeign-order
    ####Spring Cloud Consul for Service Discovery
    cloud:
        consul:
            host: localhost
            port: 8500
            discovery:
                prefer-ip-address: true #优先使用服务ip进行注册
                service-name: ${spring.application.name}
#        openfeign:
#            client:
#                config:
#                    default:
#                        connect-timeout: 10000
#                        read-timeout: 12000
#            httpclient:
#                hc5:
#                    enabled: true
#            compression:
#                request:
#                    enabled: true
#                    min-request-size: 2048 #最小触发压缩的大小
#                    mime-types: text/xml,application/xml,application/json #触发压缩数据类型
#                response:
#                    enabled: true
#            circuitbreaker: # 开启circuitbreaker和分组激活
#                enabled: true
#                group:
#                    enabled: true #没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后

#logging:
#    level:
#        com:
#            atguigu:
#                cloud:
#                    apis:
#                        PayFeignApi: DEBUG

resilience4j:
    ####resilience4j ratelimiter 限流的例子
    ratelimiter:
        configs:
            default:
                limitForPeriod: 2 #在一次刷新周期内，允许执行的最大请求数
                limitRefreshPeriod: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod
                timeout-duration: 1 # 线程等待权限的默认等待时间
        instances:
            cloud-payment-service:
                baseConfig: default
    #    circuitbreaker:
    #        configs:
    #            default:
    #                failure-rate-threshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态
    #                sliding-window-type: COUNT_BASED # 滑动窗口的类型
    #                sliding-window-size: 6 #滑动窗⼝的⼤⼩配置COUNT_BASED表示6个请求，配置TIME_BASED表示6秒
    #                minimum-number-of-calls: 6 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
    #                automatic-transition-from-open-to-half-open-enabled: true # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
    #                wait-duration-in-open-state: 5s #从OPEN到HALF_OPEN状态需要等待的时间
    #                permitted-number-of-calls-in-half-open-state: 2 #半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多
    #                record-exceptions:
    #                    - java.lang.Exception
    #        instances:
    #            cloud-provider-payment:
    #                base-config: default
#    bulkhead:
#        configs:
#            default:
#                maxConcurrentCalls: 2 # 隔离允许并发线程执行的最大数量
#                maxWaitDuration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底fallback
#        instances:
#            cloud-payment-service:
#                baseConfig: default
#    timelimiter:
#        configs:
#            default:
#                timeout-duration: 10s #timelimiter默认限制远程1s，超过报错不好演示效果所以加上10秒

